{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/QuickSort.js","sortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","auxillaryArray","quickSort","startIndex","endIndex","pivotIndex","pivot","swap","partitionArray","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","getBubbleSortAnimations","N","bubbleSort","NUMBER_OF_ARRAY_BARS","window","innerWidth","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","className","rel","href","map","value","idx","class","onClick","mergeSort","id","type","defaultValue","step","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3b8651b1.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7,2,1,6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i -1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from \"react\";\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\";\nimport { getHeapSortAnimations } from \"../sortingAlgorithms/HeapSort\";\nimport { getQuickSortAnimations } from \"../sortingAlgorithms/QuickSort\";\nimport { getInsertionSortAnimations } from \"../sortingAlgorithms/InsertionSort\";\nimport { getSelectionSortAnimations } from \"../sortingAlgorithms/SelectionSort\";\nimport { getBubbleSortAnimations } from \"../sortingAlgorithms/BubbleSort\";\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = window.innerWidth / 6;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = \"green\";\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = \"red\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const [animations, sortArray] = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length - 1; i++) {\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n        if (barOneIndex === -1) {\n          continue;\n        }\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  insertionSort() {\n    const [animations, sortArray] = getInsertionSortAnimations(\n      this.state.array\n    );\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparision1\" ||\n        animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\"\n        ></link>\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}\n          ></div>\n        ))}\n        <br></br>\n\n        <button\n          class=\"waves-effect waves-light btn\"\n          onClick={() => this.resetArray()}\n        >\n          Generate New Array\n        </button>\n        <ul>\n          <li></li>\n          &nbsp;\n          <li>\n            <button\n              class=\"waves-effect waves-light btn\"\n              onClick={() => this.mergeSort()}\n            >\n              Merge Sort O(n*Log n)\n            </button>\n          </li>\n          &nbsp;\n          <li>\n            <button\n              class=\"waves-effect waves-light btn\"\n              onClick={() => this.quickSort()}\n            >\n              Quick Sort O(n*Log n)\n            </button>\n          </li>\n          &nbsp;\n          <li>\n            <button\n              class=\"waves-effect waves-light btn\"\n              onClick={() => this.insertionSort()}\n            >\n              Insertion Sort (slow)\n            </button>\n          </li>\n          &nbsp;\n          <li>\n            <button\n              class=\"waves-effect waves-light btn\"\n              onClick={() => this.bubbleSort()}\n            >\n              Bubble Sort (slow)\n            </button>\n          </li>\n        </ul>\n        <input\n          class=\"slide\"\n          id=\"typeinp\"\n          type=\"range\"\n          min=\"10\"\n          max=\"300\"\n          defaultValue=\"300\"\n          step=\"1\"\n        />\n      </div>\n    );\n  }\n}\n\nconsole.log(document.getElementsByClassName(\"slide\").value);\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","export function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}